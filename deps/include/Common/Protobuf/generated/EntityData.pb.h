// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityData.proto

#ifndef PROTOBUF_EntityData_2eproto__INCLUDED
#define PROTOBUF_EntityData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Base.pb.h"
#include "WallAdditionalData.pb.h"
#include "SnakeAdditionalData.pb.h"
// @@protoc_insertion_point(includes)
namespace Data {
class EntityData;
class EntityDataDefaultTypeInternal;
extern EntityDataDefaultTypeInternal _EntityData_default_instance_;
class SnakeAdditionalData;
class SnakeAdditionalDataDefaultTypeInternal;
extern SnakeAdditionalDataDefaultTypeInternal _SnakeAdditionalData_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class WallAdditionalData;
class WallAdditionalDataDefaultTypeInternal;
extern WallAdditionalDataDefaultTypeInternal _WallAdditionalData_default_instance_;
}  // namespace Data

namespace Data {

namespace protobuf_EntityData_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_EntityData_2eproto

// ===================================================================

class EntityData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data.EntityData) */ {
 public:
  EntityData();
  virtual ~EntityData();

  EntityData(const EntityData& from);

  inline EntityData& operator=(const EntityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityData& default_instance();

  static inline const EntityData* internal_default_instance() {
    return reinterpret_cast<const EntityData*>(
               &_EntityData_default_instance_);
  }

  void Swap(EntityData* other);

  // implements Message ----------------------------------------------

  inline EntityData* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityData& from);
  void MergeFrom(const EntityData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Data.Vec2 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::Data::Vec2& pos() const;
  ::Data::Vec2* mutable_pos();
  ::Data::Vec2* release_pos();
  void set_allocated_pos(::Data::Vec2* pos);

  // optional .Data.WallAdditionalData wdata = 4;
  bool has_wdata() const;
  void clear_wdata();
  static const int kWdataFieldNumber = 4;
  const ::Data::WallAdditionalData& wdata() const;
  ::Data::WallAdditionalData* mutable_wdata();
  ::Data::WallAdditionalData* release_wdata();
  void set_allocated_wdata(::Data::WallAdditionalData* wdata);

  // optional .Data.SnakeAdditionalData sdata = 5;
  bool has_sdata() const;
  void clear_sdata();
  static const int kSdataFieldNumber = 5;
  const ::Data::SnakeAdditionalData& sdata() const;
  ::Data::SnakeAdditionalData* mutable_sdata();
  ::Data::SnakeAdditionalData* release_sdata();
  void set_allocated_sdata(::Data::SnakeAdditionalData* sdata);

  // required uint32 eid = 1;
  bool has_eid() const;
  void clear_eid();
  static const int kEidFieldNumber = 1;
  ::google::protobuf::uint32 eid() const;
  void set_eid(::google::protobuf::uint32 value);

  // required uint32 etype = 2;
  bool has_etype() const;
  void clear_etype();
  static const int kEtypeFieldNumber = 2;
  ::google::protobuf::uint32 etype() const;
  void set_etype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Data.EntityData)
 private:
  void set_has_eid();
  void clear_has_eid();
  void set_has_etype();
  void clear_has_etype();
  void set_has_pos();
  void clear_has_pos();
  void set_has_wdata();
  void clear_has_wdata();
  void set_has_sdata();
  void clear_has_sdata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Data::Vec2* pos_;
  ::Data::WallAdditionalData* wdata_;
  ::Data::SnakeAdditionalData* sdata_;
  ::google::protobuf::uint32 eid_;
  ::google::protobuf::uint32 etype_;
  friend struct  protobuf_EntityData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityData

// required uint32 eid = 1;
inline bool EntityData::has_eid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityData::set_has_eid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntityData::clear_has_eid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntityData::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 EntityData::eid() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.eid)
  return eid_;
}
inline void EntityData::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Data.EntityData.eid)
}

// required uint32 etype = 2;
inline bool EntityData::has_etype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntityData::set_has_etype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntityData::clear_has_etype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntityData::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
inline ::google::protobuf::uint32 EntityData::etype() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.etype)
  return etype_;
}
inline void EntityData::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Data.EntityData.etype)
}

// optional .Data.Vec2 pos = 3;
inline bool EntityData::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityData::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityData::clear_pos() {
  if (pos_ != NULL) pos_->::Data::Vec2::Clear();
  clear_has_pos();
}
inline const ::Data::Vec2& EntityData::pos() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.pos)
  return pos_ != NULL ? *pos_
                         : *::Data::Vec2::internal_default_instance();
}
inline ::Data::Vec2* EntityData::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Data::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.pos)
  return pos_;
}
inline ::Data::Vec2* EntityData::release_pos() {
  // @@protoc_insertion_point(field_release:Data.EntityData.pos)
  clear_has_pos();
  ::Data::Vec2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_pos(::Data::Vec2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.pos)
}

// optional .Data.WallAdditionalData wdata = 4;
inline bool EntityData::has_wdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityData::set_has_wdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntityData::clear_has_wdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntityData::clear_wdata() {
  if (wdata_ != NULL) wdata_->::Data::WallAdditionalData::Clear();
  clear_has_wdata();
}
inline const ::Data::WallAdditionalData& EntityData::wdata() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.wdata)
  return wdata_ != NULL ? *wdata_
                         : *::Data::WallAdditionalData::internal_default_instance();
}
inline ::Data::WallAdditionalData* EntityData::mutable_wdata() {
  set_has_wdata();
  if (wdata_ == NULL) {
    wdata_ = new ::Data::WallAdditionalData;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.wdata)
  return wdata_;
}
inline ::Data::WallAdditionalData* EntityData::release_wdata() {
  // @@protoc_insertion_point(field_release:Data.EntityData.wdata)
  clear_has_wdata();
  ::Data::WallAdditionalData* temp = wdata_;
  wdata_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_wdata(::Data::WallAdditionalData* wdata) {
  delete wdata_;
  wdata_ = wdata;
  if (wdata) {
    set_has_wdata();
  } else {
    clear_has_wdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.wdata)
}

// optional .Data.SnakeAdditionalData sdata = 5;
inline bool EntityData::has_sdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityData::set_has_sdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntityData::clear_has_sdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntityData::clear_sdata() {
  if (sdata_ != NULL) sdata_->::Data::SnakeAdditionalData::Clear();
  clear_has_sdata();
}
inline const ::Data::SnakeAdditionalData& EntityData::sdata() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.sdata)
  return sdata_ != NULL ? *sdata_
                         : *::Data::SnakeAdditionalData::internal_default_instance();
}
inline ::Data::SnakeAdditionalData* EntityData::mutable_sdata() {
  set_has_sdata();
  if (sdata_ == NULL) {
    sdata_ = new ::Data::SnakeAdditionalData;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.sdata)
  return sdata_;
}
inline ::Data::SnakeAdditionalData* EntityData::release_sdata() {
  // @@protoc_insertion_point(field_release:Data.EntityData.sdata)
  clear_has_sdata();
  ::Data::SnakeAdditionalData* temp = sdata_;
  sdata_ = NULL;
  return temp;
}
inline void EntityData::set_allocated_sdata(::Data::SnakeAdditionalData* sdata) {
  delete sdata_;
  sdata_ = sdata;
  if (sdata) {
    set_has_sdata();
  } else {
    clear_has_sdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.sdata)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EntityData_2eproto__INCLUDED
