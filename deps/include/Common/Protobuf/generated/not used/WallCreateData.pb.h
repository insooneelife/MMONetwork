// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WallCreateData.proto

#ifndef PROTOBUF_WallCreateData_2eproto__INCLUDED
#define PROTOBUF_WallCreateData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Base.pb.h"
// @@protoc_insertion_point(includes)
namespace Data {
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class WallCreateData;
class WallCreateDataDefaultTypeInternal;
extern WallCreateDataDefaultTypeInternal _WallCreateData_default_instance_;
}  // namespace Data

namespace Data {

namespace protobuf_WallCreateData_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_WallCreateData_2eproto

// ===================================================================

class WallCreateData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data.WallCreateData) */ {
 public:
  WallCreateData();
  virtual ~WallCreateData();

  WallCreateData(const WallCreateData& from);

  inline WallCreateData& operator=(const WallCreateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WallCreateData& default_instance();

  static inline const WallCreateData* internal_default_instance() {
    return reinterpret_cast<const WallCreateData*>(
               &_WallCreateData_default_instance_);
  }

  void Swap(WallCreateData* other);

  // implements Message ----------------------------------------------

  inline WallCreateData* New() const PROTOBUF_FINAL { return New(NULL); }

  WallCreateData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WallCreateData& from);
  void MergeFrom(const WallCreateData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WallCreateData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Data.Vec2 start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::Data::Vec2& start() const;
  ::Data::Vec2* mutable_start();
  ::Data::Vec2* release_start();
  void set_allocated_start(::Data::Vec2* start);

  // required .Data.Vec2 finish = 3;
  bool has_finish() const;
  void clear_finish();
  static const int kFinishFieldNumber = 3;
  const ::Data::Vec2& finish() const;
  ::Data::Vec2* mutable_finish();
  ::Data::Vec2* release_finish();
  void set_allocated_finish(::Data::Vec2* finish);

  // required int32 entity_id = 1;
  bool has_entity_id() const;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entity_id() const;
  void set_entity_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Data.WallCreateData)
 private:
  void set_has_entity_id();
  void clear_has_entity_id();
  void set_has_start();
  void clear_has_start();
  void set_has_finish();
  void clear_has_finish();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Data::Vec2* start_;
  ::Data::Vec2* finish_;
  ::google::protobuf::int32 entity_id_;
  friend struct  protobuf_WallCreateData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WallCreateData

// required int32 entity_id = 1;
inline bool WallCreateData::has_entity_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WallCreateData::set_has_entity_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WallCreateData::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WallCreateData::clear_entity_id() {
  entity_id_ = 0;
  clear_has_entity_id();
}
inline ::google::protobuf::int32 WallCreateData::entity_id() const {
  // @@protoc_insertion_point(field_get:Data.WallCreateData.entity_id)
  return entity_id_;
}
inline void WallCreateData::set_entity_id(::google::protobuf::int32 value) {
  set_has_entity_id();
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:Data.WallCreateData.entity_id)
}

// required .Data.Vec2 start = 2;
inline bool WallCreateData::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WallCreateData::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WallCreateData::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WallCreateData::clear_start() {
  if (start_ != NULL) start_->::Data::Vec2::Clear();
  clear_has_start();
}
inline const ::Data::Vec2& WallCreateData::start() const {
  // @@protoc_insertion_point(field_get:Data.WallCreateData.start)
  return start_ != NULL ? *start_
                         : *::Data::Vec2::internal_default_instance();
}
inline ::Data::Vec2* WallCreateData::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::Data::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:Data.WallCreateData.start)
  return start_;
}
inline ::Data::Vec2* WallCreateData::release_start() {
  // @@protoc_insertion_point(field_release:Data.WallCreateData.start)
  clear_has_start();
  ::Data::Vec2* temp = start_;
  start_ = NULL;
  return temp;
}
inline void WallCreateData::set_allocated_start(::Data::Vec2* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.WallCreateData.start)
}

// required .Data.Vec2 finish = 3;
inline bool WallCreateData::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WallCreateData::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WallCreateData::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WallCreateData::clear_finish() {
  if (finish_ != NULL) finish_->::Data::Vec2::Clear();
  clear_has_finish();
}
inline const ::Data::Vec2& WallCreateData::finish() const {
  // @@protoc_insertion_point(field_get:Data.WallCreateData.finish)
  return finish_ != NULL ? *finish_
                         : *::Data::Vec2::internal_default_instance();
}
inline ::Data::Vec2* WallCreateData::mutable_finish() {
  set_has_finish();
  if (finish_ == NULL) {
    finish_ = new ::Data::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:Data.WallCreateData.finish)
  return finish_;
}
inline ::Data::Vec2* WallCreateData::release_finish() {
  // @@protoc_insertion_point(field_release:Data.WallCreateData.finish)
  clear_has_finish();
  ::Data::Vec2* temp = finish_;
  finish_ = NULL;
  return temp;
}
inline void WallCreateData::set_allocated_finish(::Data::Vec2* finish) {
  delete finish_;
  finish_ = finish;
  if (finish) {
    set_has_finish();
  } else {
    clear_has_finish();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.WallCreateData.finish)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WallCreateData_2eproto__INCLUDED
