// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProjectileUpdateData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProjectileUpdateData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Data {
class ProjectileUpdateDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProjectileUpdateData> {
} _ProjectileUpdateData_default_instance_;

namespace protobuf_ProjectileUpdateData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectileUpdateData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectileUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectileUpdateData, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectileUpdateData, pos_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ProjectileUpdateData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProjectileUpdateData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ProjectileUpdateData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProjectileUpdateData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Data::protobuf_Base_2eproto::InitDefaults();
  _ProjectileUpdateData_default_instance_.DefaultConstruct();
  _ProjectileUpdateData_default_instance_.get_mutable()->pos_ = const_cast< ::Data::Vec2*>(
      ::Data::Vec2::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032ProjectileUpdateData.proto\022\004Data\032\nBase"
      ".proto\"B\n\024ProjectileUpdateData\022\021\n\tentity"
      "_id\030\001 \002(\005\022\027\n\003pos\030\002 \002(\0132\n.Data.Vec2"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 114);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProjectileUpdateData.proto", &protobuf_RegisterTypes);
  ::Data::protobuf_Base_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ProjectileUpdateData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectileUpdateData::kEntityIdFieldNumber;
const int ProjectileUpdateData::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectileUpdateData::ProjectileUpdateData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProjectileUpdateData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data.ProjectileUpdateData)
}
ProjectileUpdateData::ProjectileUpdateData(const ProjectileUpdateData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Data::Vec2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  entity_id_ = from.entity_id_;
  // @@protoc_insertion_point(copy_constructor:Data.ProjectileUpdateData)
}

void ProjectileUpdateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(entity_id_));
}

ProjectileUpdateData::~ProjectileUpdateData() {
  // @@protoc_insertion_point(destructor:Data.ProjectileUpdateData)
  SharedDtor();
}

void ProjectileUpdateData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void ProjectileUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectileUpdateData::descriptor() {
  protobuf_ProjectileUpdateData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProjectileUpdateData_2eproto::file_level_metadata[0].descriptor;
}

const ProjectileUpdateData& ProjectileUpdateData::default_instance() {
  protobuf_ProjectileUpdateData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProjectileUpdateData* ProjectileUpdateData::New(::google::protobuf::Arena* arena) const {
  ProjectileUpdateData* n = new ProjectileUpdateData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectileUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:Data.ProjectileUpdateData)
  if (has_pos()) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->::Data::Vec2::Clear();
  }
  entity_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjectileUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data.ProjectileUpdateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entity_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_entity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Data.Vec2 pos = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data.ProjectileUpdateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data.ProjectileUpdateData)
  return false;
#undef DO_
}

void ProjectileUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data.ProjectileUpdateData)
  // required int32 entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_id(), output);
  }

  // required .Data.Vec2 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Data.ProjectileUpdateData)
}

::google::protobuf::uint8* ProjectileUpdateData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data.ProjectileUpdateData)
  // required int32 entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_id(), target);
  }

  // required .Data.Vec2 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data.ProjectileUpdateData)
  return target;
}

size_t ProjectileUpdateData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Data.ProjectileUpdateData)
  size_t total_size = 0;

  if (has_pos()) {
    // required .Data.Vec2 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_entity_id()) {
    // required int32 entity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_id());
  }

  return total_size;
}
size_t ProjectileUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data.ProjectileUpdateData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Data.Vec2 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required int32 entity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectileUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data.ProjectileUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectileUpdateData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectileUpdateData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data.ProjectileUpdateData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data.ProjectileUpdateData)
    MergeFrom(*source);
  }
}

void ProjectileUpdateData::MergeFrom(const ProjectileUpdateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data.ProjectileUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_pos()) {
      mutable_pos()->::Data::Vec2::MergeFrom(from.pos());
    }
    if (from.has_entity_id()) {
      set_entity_id(from.entity_id());
    }
  }
}

void ProjectileUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data.ProjectileUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectileUpdateData::CopyFrom(const ProjectileUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data.ProjectileUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectileUpdateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void ProjectileUpdateData::Swap(ProjectileUpdateData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectileUpdateData::InternalSwap(ProjectileUpdateData* other) {
  std::swap(pos_, other->pos_);
  std::swap(entity_id_, other->entity_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectileUpdateData::GetMetadata() const {
  protobuf_ProjectileUpdateData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProjectileUpdateData_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProjectileUpdateData

// required int32 entity_id = 1;
bool ProjectileUpdateData::has_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProjectileUpdateData::set_has_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ProjectileUpdateData::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProjectileUpdateData::clear_entity_id() {
  entity_id_ = 0;
  clear_has_entity_id();
}
::google::protobuf::int32 ProjectileUpdateData::entity_id() const {
  // @@protoc_insertion_point(field_get:Data.ProjectileUpdateData.entity_id)
  return entity_id_;
}
void ProjectileUpdateData::set_entity_id(::google::protobuf::int32 value) {
  set_has_entity_id();
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:Data.ProjectileUpdateData.entity_id)
}

// required .Data.Vec2 pos = 2;
bool ProjectileUpdateData::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProjectileUpdateData::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void ProjectileUpdateData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProjectileUpdateData::clear_pos() {
  if (pos_ != NULL) pos_->::Data::Vec2::Clear();
  clear_has_pos();
}
const ::Data::Vec2& ProjectileUpdateData::pos() const {
  // @@protoc_insertion_point(field_get:Data.ProjectileUpdateData.pos)
  return pos_ != NULL ? *pos_
                         : *::Data::Vec2::internal_default_instance();
}
::Data::Vec2* ProjectileUpdateData::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Data::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:Data.ProjectileUpdateData.pos)
  return pos_;
}
::Data::Vec2* ProjectileUpdateData::release_pos() {
  // @@protoc_insertion_point(field_release:Data.ProjectileUpdateData.pos)
  clear_has_pos();
  ::Data::Vec2* temp = pos_;
  pos_ = NULL;
  return temp;
}
void ProjectileUpdateData::set_allocated_pos(::Data::Vec2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ProjectileUpdateData.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)
