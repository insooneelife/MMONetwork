// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReplicateData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReplicateData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Data {
class ReplicateDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplicateData> {
} _ReplicateData_default_instance_;

namespace protobuf_ReplicateData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateData, modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateData, updated_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ReplicateData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplicateData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ReplicateData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReplicateData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Data::protobuf_ModifyData_2eproto::InitDefaults();
  ::Data::protobuf_UpdateData_2eproto::InitDefaults();
  _ReplicateData_default_instance_.DefaultConstruct();
  _ReplicateData_default_instance_.get_mutable()->modified_ = const_cast< ::Data::ModifyData*>(
      ::Data::ModifyData::internal_default_instance());
  _ReplicateData_default_instance_.get_mutable()->updated_ = const_cast< ::Data::UpdateData*>(
      ::Data::UpdateData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023ReplicateData.proto\022\004Data\032\020ModifyData."
      "proto\032\020UpdateData.proto\"V\n\rReplicateData"
      "\022\"\n\010modified\030\001 \001(\0132\020.Data.ModifyData\022!\n\007"
      "updated\030\002 \001(\0132\020.Data.UpdateData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReplicateData.proto", &protobuf_RegisterTypes);
  ::Data::protobuf_ModifyData_2eproto::AddDescriptors();
  ::Data::protobuf_UpdateData_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ReplicateData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicateData::kModifiedFieldNumber;
const int ReplicateData::kUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicateData::ReplicateData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ReplicateData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data.ReplicateData)
}
ReplicateData::ReplicateData(const ReplicateData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_modified()) {
    modified_ = new ::Data::ModifyData(*from.modified_);
  } else {
    modified_ = NULL;
  }
  if (from.has_updated()) {
    updated_ = new ::Data::UpdateData(*from.updated_);
  } else {
    updated_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Data.ReplicateData)
}

void ReplicateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&modified_, 0, reinterpret_cast<char*>(&updated_) -
    reinterpret_cast<char*>(&modified_) + sizeof(updated_));
}

ReplicateData::~ReplicateData() {
  // @@protoc_insertion_point(destructor:Data.ReplicateData)
  SharedDtor();
}

void ReplicateData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete modified_;
  }
  if (this != internal_default_instance()) {
    delete updated_;
  }
}

void ReplicateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateData::descriptor() {
  protobuf_ReplicateData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ReplicateData_2eproto::file_level_metadata[0].descriptor;
}

const ReplicateData& ReplicateData::default_instance() {
  protobuf_ReplicateData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicateData* ReplicateData::New(::google::protobuf::Arena* arena) const {
  ReplicateData* n = new ReplicateData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicateData::Clear() {
// @@protoc_insertion_point(message_clear_start:Data.ReplicateData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_modified()) {
      GOOGLE_DCHECK(modified_ != NULL);
      modified_->::Data::ModifyData::Clear();
    }
    if (has_updated()) {
      GOOGLE_DCHECK(updated_ != NULL);
      updated_->::Data::UpdateData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplicateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data.ReplicateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Data.ModifyData modified = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Data.UpdateData updated = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data.ReplicateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data.ReplicateData)
  return false;
#undef DO_
}

void ReplicateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data.ReplicateData)
  // optional .Data.ModifyData modified = 1;
  if (has_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->modified_, output);
  }

  // optional .Data.UpdateData updated = 2;
  if (has_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->updated_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Data.ReplicateData)
}

::google::protobuf::uint8* ReplicateData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data.ReplicateData)
  // optional .Data.ModifyData modified = 1;
  if (has_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->modified_, false, target);
  }

  // optional .Data.UpdateData updated = 2;
  if (has_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->updated_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data.ReplicateData)
  return target;
}

size_t ReplicateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data.ReplicateData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Data.ModifyData modified = 1;
    if (has_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modified_);
    }

    // optional .Data.UpdateData updated = 2;
    if (has_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updated_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data.ReplicateData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicateData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data.ReplicateData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data.ReplicateData)
    MergeFrom(*source);
  }
}

void ReplicateData::MergeFrom(const ReplicateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data.ReplicateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_modified()) {
      mutable_modified()->::Data::ModifyData::MergeFrom(from.modified());
    }
    if (from.has_updated()) {
      mutable_updated()->::Data::UpdateData::MergeFrom(from.updated());
    }
  }
}

void ReplicateData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data.ReplicateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateData::CopyFrom(const ReplicateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data.ReplicateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateData::IsInitialized() const {
  if (has_modified()) {
    if (!this->modified_->IsInitialized()) return false;
  }
  if (has_updated()) {
    if (!this->updated_->IsInitialized()) return false;
  }
  return true;
}

void ReplicateData::Swap(ReplicateData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicateData::InternalSwap(ReplicateData* other) {
  std::swap(modified_, other->modified_);
  std::swap(updated_, other->updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicateData::GetMetadata() const {
  protobuf_ReplicateData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ReplicateData_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicateData

// optional .Data.ModifyData modified = 1;
bool ReplicateData::has_modified() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicateData::set_has_modified() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicateData::clear_has_modified() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicateData::clear_modified() {
  if (modified_ != NULL) modified_->::Data::ModifyData::Clear();
  clear_has_modified();
}
const ::Data::ModifyData& ReplicateData::modified() const {
  // @@protoc_insertion_point(field_get:Data.ReplicateData.modified)
  return modified_ != NULL ? *modified_
                         : *::Data::ModifyData::internal_default_instance();
}
::Data::ModifyData* ReplicateData::mutable_modified() {
  set_has_modified();
  if (modified_ == NULL) {
    modified_ = new ::Data::ModifyData;
  }
  // @@protoc_insertion_point(field_mutable:Data.ReplicateData.modified)
  return modified_;
}
::Data::ModifyData* ReplicateData::release_modified() {
  // @@protoc_insertion_point(field_release:Data.ReplicateData.modified)
  clear_has_modified();
  ::Data::ModifyData* temp = modified_;
  modified_ = NULL;
  return temp;
}
void ReplicateData::set_allocated_modified(::Data::ModifyData* modified) {
  delete modified_;
  modified_ = modified;
  if (modified) {
    set_has_modified();
  } else {
    clear_has_modified();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ReplicateData.modified)
}

// optional .Data.UpdateData updated = 2;
bool ReplicateData::has_updated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicateData::set_has_updated() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicateData::clear_has_updated() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicateData::clear_updated() {
  if (updated_ != NULL) updated_->::Data::UpdateData::Clear();
  clear_has_updated();
}
const ::Data::UpdateData& ReplicateData::updated() const {
  // @@protoc_insertion_point(field_get:Data.ReplicateData.updated)
  return updated_ != NULL ? *updated_
                         : *::Data::UpdateData::internal_default_instance();
}
::Data::UpdateData* ReplicateData::mutable_updated() {
  set_has_updated();
  if (updated_ == NULL) {
    updated_ = new ::Data::UpdateData;
  }
  // @@protoc_insertion_point(field_mutable:Data.ReplicateData.updated)
  return updated_;
}
::Data::UpdateData* ReplicateData::release_updated() {
  // @@protoc_insertion_point(field_release:Data.ReplicateData.updated)
  clear_has_updated();
  ::Data::UpdateData* temp = updated_;
  updated_ = NULL;
  return temp;
}
void ReplicateData::set_allocated_updated(::Data::UpdateData* updated) {
  delete updated_;
  updated_ = updated;
  if (updated) {
    set_has_updated();
  } else {
    clear_has_updated();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ReplicateData.updated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)
