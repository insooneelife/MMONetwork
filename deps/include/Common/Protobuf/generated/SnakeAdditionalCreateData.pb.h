// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnakeAdditionalCreateData.proto

#ifndef PROTOBUF_SnakeAdditionalCreateData_2eproto__INCLUDED
#define PROTOBUF_SnakeAdditionalCreateData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Base.pb.h"
// @@protoc_insertion_point(includes)
namespace Data {
class SnakeAdditionalCreateData;
class SnakeAdditionalCreateDataDefaultTypeInternal;
extern SnakeAdditionalCreateDataDefaultTypeInternal _SnakeAdditionalCreateData_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
}  // namespace Data

namespace Data {

namespace protobuf_SnakeAdditionalCreateData_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SnakeAdditionalCreateData_2eproto

// ===================================================================

class SnakeAdditionalCreateData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data.SnakeAdditionalCreateData) */ {
 public:
  SnakeAdditionalCreateData();
  virtual ~SnakeAdditionalCreateData();

  SnakeAdditionalCreateData(const SnakeAdditionalCreateData& from);

  inline SnakeAdditionalCreateData& operator=(const SnakeAdditionalCreateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnakeAdditionalCreateData& default_instance();

  static inline const SnakeAdditionalCreateData* internal_default_instance() {
    return reinterpret_cast<const SnakeAdditionalCreateData*>(
               &_SnakeAdditionalCreateData_default_instance_);
  }

  void Swap(SnakeAdditionalCreateData* other);

  // implements Message ----------------------------------------------

  inline SnakeAdditionalCreateData* New() const PROTOBUF_FINAL { return New(NULL); }

  SnakeAdditionalCreateData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnakeAdditionalCreateData& from);
  void MergeFrom(const SnakeAdditionalCreateData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnakeAdditionalCreateData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Data.Vec2 bodies = 1;
  int bodies_size() const;
  void clear_bodies();
  static const int kBodiesFieldNumber = 1;
  const ::Data::Vec2& bodies(int index) const;
  ::Data::Vec2* mutable_bodies(int index);
  ::Data::Vec2* add_bodies();
  ::google::protobuf::RepeatedPtrField< ::Data::Vec2 >*
      mutable_bodies();
  const ::google::protobuf::RepeatedPtrField< ::Data::Vec2 >&
      bodies() const;

  // required .Data.ControlType control_type = 2;
  bool has_control_type() const;
  void clear_control_type();
  static const int kControlTypeFieldNumber = 2;
  ::Data::ControlType control_type() const;
  void set_control_type(::Data::ControlType value);

  // @@protoc_insertion_point(class_scope:Data.SnakeAdditionalCreateData)
 private:
  void set_has_control_type();
  void clear_has_control_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Data::Vec2 > bodies_;
  int control_type_;
  friend struct  protobuf_SnakeAdditionalCreateData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SnakeAdditionalCreateData

// repeated .Data.Vec2 bodies = 1;
inline int SnakeAdditionalCreateData::bodies_size() const {
  return bodies_.size();
}
inline void SnakeAdditionalCreateData::clear_bodies() {
  bodies_.Clear();
}
inline const ::Data::Vec2& SnakeAdditionalCreateData::bodies(int index) const {
  // @@protoc_insertion_point(field_get:Data.SnakeAdditionalCreateData.bodies)
  return bodies_.Get(index);
}
inline ::Data::Vec2* SnakeAdditionalCreateData::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:Data.SnakeAdditionalCreateData.bodies)
  return bodies_.Mutable(index);
}
inline ::Data::Vec2* SnakeAdditionalCreateData::add_bodies() {
  // @@protoc_insertion_point(field_add:Data.SnakeAdditionalCreateData.bodies)
  return bodies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Data::Vec2 >*
SnakeAdditionalCreateData::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:Data.SnakeAdditionalCreateData.bodies)
  return &bodies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Data::Vec2 >&
SnakeAdditionalCreateData::bodies() const {
  // @@protoc_insertion_point(field_list:Data.SnakeAdditionalCreateData.bodies)
  return bodies_;
}

// required .Data.ControlType control_type = 2;
inline bool SnakeAdditionalCreateData::has_control_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnakeAdditionalCreateData::set_has_control_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnakeAdditionalCreateData::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnakeAdditionalCreateData::clear_control_type() {
  control_type_ = 0;
  clear_has_control_type();
}
inline ::Data::ControlType SnakeAdditionalCreateData::control_type() const {
  // @@protoc_insertion_point(field_get:Data.SnakeAdditionalCreateData.control_type)
  return static_cast< ::Data::ControlType >(control_type_);
}
inline void SnakeAdditionalCreateData::set_control_type(::Data::ControlType value) {
  assert(::Data::ControlType_IsValid(value));
  set_has_control_type();
  control_type_ = value;
  // @@protoc_insertion_point(field_set:Data.SnakeAdditionalCreateData.control_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SnakeAdditionalCreateData_2eproto__INCLUDED
