// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntityData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Data {
class EntityDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EntityData> {
} _EntityData_default_instance_;

namespace protobuf_EntityData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, eid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, etype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, wdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityData, sdata_),
  3,
  4,
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(EntityData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "EntityData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _EntityData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Data::protobuf_Base_2eproto::InitDefaults();
  ::Data::protobuf_WallAdditionalData_2eproto::InitDefaults();
  ::Data::protobuf_SnakeAdditionalData_2eproto::InitDefaults();
  _EntityData_default_instance_.DefaultConstruct();
  _EntityData_default_instance_.get_mutable()->pos_ = const_cast< ::Data::Vec2*>(
      ::Data::Vec2::internal_default_instance());
  _EntityData_default_instance_.get_mutable()->wdata_ = const_cast< ::Data::WallAdditionalData*>(
      ::Data::WallAdditionalData::internal_default_instance());
  _EntityData_default_instance_.get_mutable()->sdata_ = const_cast< ::Data::SnakeAdditionalData*>(
      ::Data::SnakeAdditionalData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020EntityData.proto\022\004Data\032\nBase.proto\032\030Wa"
      "llAdditionalData.proto\032\031SnakeAdditionalD"
      "ata.proto\"\224\001\n\nEntityData\022\013\n\003eid\030\001 \002(\r\022\r\n"
      "\005etype\030\002 \002(\r\022\027\n\003pos\030\003 \001(\0132\n.Data.Vec2\022\'\n"
      "\005wdata\030\004 \001(\0132\030.Data.WallAdditionalData\022("
      "\n\005sdata\030\005 \001(\0132\031.Data.SnakeAdditionalData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntityData.proto", &protobuf_RegisterTypes);
  ::Data::protobuf_Base_2eproto::AddDescriptors();
  ::Data::protobuf_WallAdditionalData_2eproto::AddDescriptors();
  ::Data::protobuf_SnakeAdditionalData_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_EntityData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityData::kEidFieldNumber;
const int EntityData::kEtypeFieldNumber;
const int EntityData::kPosFieldNumber;
const int EntityData::kWdataFieldNumber;
const int EntityData::kSdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityData::EntityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EntityData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data.EntityData)
}
EntityData::EntityData(const EntityData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Data::Vec2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_wdata()) {
    wdata_ = new ::Data::WallAdditionalData(*from.wdata_);
  } else {
    wdata_ = NULL;
  }
  if (from.has_sdata()) {
    sdata_ = new ::Data::SnakeAdditionalData(*from.sdata_);
  } else {
    sdata_ = NULL;
  }
  ::memcpy(&eid_, &from.eid_,
    reinterpret_cast<char*>(&etype_) -
    reinterpret_cast<char*>(&eid_) + sizeof(etype_));
  // @@protoc_insertion_point(copy_constructor:Data.EntityData)
}

void EntityData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&etype_) -
    reinterpret_cast<char*>(&pos_) + sizeof(etype_));
}

EntityData::~EntityData() {
  // @@protoc_insertion_point(destructor:Data.EntityData)
  SharedDtor();
}

void EntityData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete wdata_;
  }
  if (this != internal_default_instance()) {
    delete sdata_;
  }
}

void EntityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityData::descriptor() {
  protobuf_EntityData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EntityData_2eproto::file_level_metadata[0].descriptor;
}

const EntityData& EntityData::default_instance() {
  protobuf_EntityData_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityData* EntityData::New(::google::protobuf::Arena* arena) const {
  EntityData* n = new EntityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityData::Clear() {
// @@protoc_insertion_point(message_clear_start:Data.EntityData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::Data::Vec2::Clear();
    }
    if (has_wdata()) {
      GOOGLE_DCHECK(wdata_ != NULL);
      wdata_->::Data::WallAdditionalData::Clear();
    }
    if (has_sdata()) {
      GOOGLE_DCHECK(sdata_ != NULL);
      sdata_->::Data::SnakeAdditionalData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&eid_, 0, reinterpret_cast<char*>(&etype_) -
      reinterpret_cast<char*>(&eid_) + sizeof(etype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EntityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data.EntityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_eid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 etype = 2;
      case 2: {
        if (tag == 16u) {
          set_has_etype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Data.Vec2 pos = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Data.WallAdditionalData wdata = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Data.SnakeAdditionalData sdata = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data.EntityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data.EntityData)
  return false;
#undef DO_
}

void EntityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data.EntityData)
  // required uint32 eid = 1;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eid(), output);
  }

  // required uint32 etype = 2;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->etype(), output);
  }

  // optional .Data.Vec2 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional .Data.WallAdditionalData wdata = 4;
  if (has_wdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->wdata_, output);
  }

  // optional .Data.SnakeAdditionalData sdata = 5;
  if (has_sdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Data.EntityData)
}

::google::protobuf::uint8* EntityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data.EntityData)
  // required uint32 eid = 1;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eid(), target);
  }

  // required uint32 etype = 2;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->etype(), target);
  }

  // optional .Data.Vec2 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional .Data.WallAdditionalData wdata = 4;
  if (has_wdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->wdata_, false, target);
  }

  // optional .Data.SnakeAdditionalData sdata = 5;
  if (has_sdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->sdata_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data.EntityData)
  return target;
}

size_t EntityData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Data.EntityData)
  size_t total_size = 0;

  if (has_eid()) {
    // required uint32 eid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eid());
  }

  if (has_etype()) {
    // required uint32 etype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->etype());
  }

  return total_size;
}
size_t EntityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data.EntityData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required uint32 eid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eid());

    // required uint32 etype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->etype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .Data.Vec2 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .Data.WallAdditionalData wdata = 4;
    if (has_wdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wdata_);
    }

    // optional .Data.SnakeAdditionalData sdata = 5;
    if (has_sdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sdata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data.EntityData)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data.EntityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data.EntityData)
    MergeFrom(*source);
  }
}

void EntityData::MergeFrom(const EntityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data.EntityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_pos()) {
      mutable_pos()->::Data::Vec2::MergeFrom(from.pos());
    }
    if (from.has_wdata()) {
      mutable_wdata()->::Data::WallAdditionalData::MergeFrom(from.wdata());
    }
    if (from.has_sdata()) {
      mutable_sdata()->::Data::SnakeAdditionalData::MergeFrom(from.sdata());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
}

void EntityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data.EntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityData::CopyFrom(const EntityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data.EntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_wdata()) {
    if (!this->wdata_->IsInitialized()) return false;
  }
  if (has_sdata()) {
    if (!this->sdata_->IsInitialized()) return false;
  }
  return true;
}

void EntityData::Swap(EntityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityData::InternalSwap(EntityData* other) {
  std::swap(pos_, other->pos_);
  std::swap(wdata_, other->wdata_);
  std::swap(sdata_, other->sdata_);
  std::swap(eid_, other->eid_);
  std::swap(etype_, other->etype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityData::GetMetadata() const {
  protobuf_EntityData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EntityData_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityData

// required uint32 eid = 1;
bool EntityData::has_eid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EntityData::set_has_eid() {
  _has_bits_[0] |= 0x00000008u;
}
void EntityData::clear_has_eid() {
  _has_bits_[0] &= ~0x00000008u;
}
void EntityData::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
::google::protobuf::uint32 EntityData::eid() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.eid)
  return eid_;
}
void EntityData::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Data.EntityData.eid)
}

// required uint32 etype = 2;
bool EntityData::has_etype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EntityData::set_has_etype() {
  _has_bits_[0] |= 0x00000010u;
}
void EntityData::clear_has_etype() {
  _has_bits_[0] &= ~0x00000010u;
}
void EntityData::clear_etype() {
  etype_ = 0u;
  clear_has_etype();
}
::google::protobuf::uint32 EntityData::etype() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.etype)
  return etype_;
}
void EntityData::set_etype(::google::protobuf::uint32 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Data.EntityData.etype)
}

// optional .Data.Vec2 pos = 3;
bool EntityData::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EntityData::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void EntityData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void EntityData::clear_pos() {
  if (pos_ != NULL) pos_->::Data::Vec2::Clear();
  clear_has_pos();
}
const ::Data::Vec2& EntityData::pos() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.pos)
  return pos_ != NULL ? *pos_
                         : *::Data::Vec2::internal_default_instance();
}
::Data::Vec2* EntityData::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Data::Vec2;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.pos)
  return pos_;
}
::Data::Vec2* EntityData::release_pos() {
  // @@protoc_insertion_point(field_release:Data.EntityData.pos)
  clear_has_pos();
  ::Data::Vec2* temp = pos_;
  pos_ = NULL;
  return temp;
}
void EntityData::set_allocated_pos(::Data::Vec2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.pos)
}

// optional .Data.WallAdditionalData wdata = 4;
bool EntityData::has_wdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EntityData::set_has_wdata() {
  _has_bits_[0] |= 0x00000002u;
}
void EntityData::clear_has_wdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void EntityData::clear_wdata() {
  if (wdata_ != NULL) wdata_->::Data::WallAdditionalData::Clear();
  clear_has_wdata();
}
const ::Data::WallAdditionalData& EntityData::wdata() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.wdata)
  return wdata_ != NULL ? *wdata_
                         : *::Data::WallAdditionalData::internal_default_instance();
}
::Data::WallAdditionalData* EntityData::mutable_wdata() {
  set_has_wdata();
  if (wdata_ == NULL) {
    wdata_ = new ::Data::WallAdditionalData;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.wdata)
  return wdata_;
}
::Data::WallAdditionalData* EntityData::release_wdata() {
  // @@protoc_insertion_point(field_release:Data.EntityData.wdata)
  clear_has_wdata();
  ::Data::WallAdditionalData* temp = wdata_;
  wdata_ = NULL;
  return temp;
}
void EntityData::set_allocated_wdata(::Data::WallAdditionalData* wdata) {
  delete wdata_;
  wdata_ = wdata;
  if (wdata) {
    set_has_wdata();
  } else {
    clear_has_wdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.wdata)
}

// optional .Data.SnakeAdditionalData sdata = 5;
bool EntityData::has_sdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EntityData::set_has_sdata() {
  _has_bits_[0] |= 0x00000004u;
}
void EntityData::clear_has_sdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void EntityData::clear_sdata() {
  if (sdata_ != NULL) sdata_->::Data::SnakeAdditionalData::Clear();
  clear_has_sdata();
}
const ::Data::SnakeAdditionalData& EntityData::sdata() const {
  // @@protoc_insertion_point(field_get:Data.EntityData.sdata)
  return sdata_ != NULL ? *sdata_
                         : *::Data::SnakeAdditionalData::internal_default_instance();
}
::Data::SnakeAdditionalData* EntityData::mutable_sdata() {
  set_has_sdata();
  if (sdata_ == NULL) {
    sdata_ = new ::Data::SnakeAdditionalData;
  }
  // @@protoc_insertion_point(field_mutable:Data.EntityData.sdata)
  return sdata_;
}
::Data::SnakeAdditionalData* EntityData::release_sdata() {
  // @@protoc_insertion_point(field_release:Data.EntityData.sdata)
  clear_has_sdata();
  ::Data::SnakeAdditionalData* temp = sdata_;
  sdata_ = NULL;
  return temp;
}
void EntityData::set_allocated_sdata(::Data::SnakeAdditionalData* sdata) {
  delete sdata_;
  sdata_ = sdata;
  if (sdata) {
    set_has_sdata();
  } else {
    clear_has_sdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Data.EntityData.sdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)
