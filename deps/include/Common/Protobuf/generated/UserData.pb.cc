// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Data {
class UserDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserData> {
} _UserData_default_instance_;

namespace protobuf_UserData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, eid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, character_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, point_),
  1,
  0,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(UserData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "UserData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _UserData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016UserData.proto\022\004Data\"T\n\010UserData\022\013\n\003pi"
      "d\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003eid\030\003 \001(\r\022\021\n\tch"
      "aracter\030\004 \001(\r\022\r\n\005point\030\005 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_UserData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData::kPidFieldNumber;
const int UserData::kNameFieldNumber;
const int UserData::kEidFieldNumber;
const int UserData::kCharacterFieldNumber;
const int UserData::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData::UserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_UserData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data.UserData)
}
UserData::UserData(const UserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&pid_, &from.pid_,
    reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&pid_) + sizeof(point_));
  // @@protoc_insertion_point(copy_constructor:Data.UserData)
}

void UserData::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&pid_) + sizeof(point_));
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:Data.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_UserData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserData_2eproto::file_level_metadata[0].descriptor;
}

const UserData& UserData::default_instance() {
  protobuf_UserData_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData* UserData::New(::google::protobuf::Arena* arena) const {
  UserData* n = new UserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:Data.UserData)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&pid_, 0, reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&pid_) + sizeof(point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Data.UserData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eid = 3;
      case 3: {
        if (tag == 24u) {
          set_has_eid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 character = 4;
      case 4: {
        if (tag == 32u) {
          set_has_character();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 point = 5;
      case 5: {
        if (tag == 40u) {
          set_has_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data.UserData)
  return false;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data.UserData)
  // required uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Data.UserData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 eid = 3;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eid(), output);
  }

  // optional uint32 character = 4;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->character(), output);
  }

  // optional uint32 point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Data.UserData)
}

::google::protobuf::uint8* UserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data.UserData)
  // required uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Data.UserData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 eid = 3;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eid(), target);
  }

  // optional uint32 character = 4;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->character(), target);
  }

  // optional uint32 point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data.UserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 pid = 1;
  if (has_pid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional uint32 eid = 3;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

    // optional uint32 character = 4;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character());
    }

    // optional uint32 point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data.UserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data.UserData)
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void UserData::Swap(UserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData::InternalSwap(UserData* other) {
  name_.Swap(&other->name_);
  std::swap(pid_, other->pid_);
  std::swap(eid_, other->eid_);
  std::swap(character_, other->character_);
  std::swap(point_, other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_UserData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_UserData_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData

// required uint32 pid = 1;
bool UserData::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
::google::protobuf::uint32 UserData::pid() const {
  // @@protoc_insertion_point(field_get:Data.UserData.pid)
  return pid_;
}
void UserData::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Data.UserData.pid)
}

// optional string name = 2;
bool UserData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& UserData::name() const {
  // @@protoc_insertion_point(field_get:Data.UserData.name)
  return name_.GetNoArena();
}
void UserData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Data.UserData.name)
}
#if LANG_CXX11
void UserData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data.UserData.name)
}
#endif
void UserData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data.UserData.name)
}
void UserData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data.UserData.name)
}
::std::string* UserData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Data.UserData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData::release_name() {
  // @@protoc_insertion_point(field_release:Data.UserData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Data.UserData.name)
}

// optional uint32 eid = 3;
bool UserData::has_eid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData::set_has_eid() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData::clear_has_eid() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
::google::protobuf::uint32 UserData::eid() const {
  // @@protoc_insertion_point(field_get:Data.UserData.eid)
  return eid_;
}
void UserData::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:Data.UserData.eid)
}

// optional uint32 character = 4;
bool UserData::has_character() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData::set_has_character() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData::clear_has_character() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData::clear_character() {
  character_ = 0u;
  clear_has_character();
}
::google::protobuf::uint32 UserData::character() const {
  // @@protoc_insertion_point(field_get:Data.UserData.character)
  return character_;
}
void UserData::set_character(::google::protobuf::uint32 value) {
  set_has_character();
  character_ = value;
  // @@protoc_insertion_point(field_set:Data.UserData.character)
}

// optional uint32 point = 5;
bool UserData::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData::clear_point() {
  point_ = 0u;
  clear_has_point();
}
::google::protobuf::uint32 UserData::point() const {
  // @@protoc_insertion_point(field_get:Data.UserData.point)
  return point_;
}
void UserData::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:Data.UserData.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)
